<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/batch 
		http://www.springframework.org/schema/batch/spring-batch.xsd">
	
	<!-- 将job-repository存到数据库中的配置 -->
	
	<bean id = "dataSource" class = "org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name = "driverClassName" value = "com.mysql.jdbc.Driver"/>
		<property name = "url" value = "jdbc:mysql://localhost:3306/test"/>
		<property name = "username" value = "root"/>
		<property name = "password" value = "123456"/>
	</bean>
	
	<bean id = "transactionManager" class = "org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name = "dataSource" ref = "dataSource"/>
	</bean>

	<batch:job-repository
		id = "jobRepository" 
		data-source = "dataSource" 
		transaction-manager = "transactionManager"
		isolation-level-for-create = "SERIALIZABLE"
		table-prefix = "BATCH_"
		max-varchar-length = "2500"
	/>

	<!-- 任务调度 -->
	<bean id="jobLauncher"
		class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
	</bean>
	<!-- 定义job -->
	<!-- restartable配置job是否重启
		job重启需要注意jobinstance的状态不是complied
		如果job是不可重启的,无论jobinstance是什么状态,都不可重新执行 -->
	<batch:job id = "jdbcJob" restartable = "true">
		<batch:step id = "jdbcStep1">
			<batch:tasklet transaction-manager = "transactionManager">
				<batch:chunk reader = "jdbcItemReader"
					   writer = "csvItemWriter"
					   processor = "processer" 
					   commit-interval = "500">
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
		<!-- 
				beforeJob按照顺序执行
				afterJoba按照相反的顺序执行
		 -->
		<batch:listeners>
			<batch:listener ref = "executionListener"/>
		</batch:listeners>
		
	</batch:job>
	
	<!-- 
		配置拦截器 
		如果拦截器发生异常,那么此job的状态为false
		拦截器有springbatch实现的compositeJobExecutionListener 组合拦截器
							JobExecutionListenerSupport 空实现
	-->
	<bean id = "executionListener" 
		class = "com.cosy.sun.listener.JobExecutionListenerImpl"/>
	
	
	<!-- 忘记配置processer和creditBill -->
	<!-- 字符一定写对 -->
	<bean id = "processer" class = "com.cosy.sun.processer.AccessProcesser" scope = "step"/>
	<bean id = "jdbcItemReader"
		class = "org.springframework.batch.item.database.JdbcCursorItemReader"
		scope = "step">
		<property name = "dataSource" ref =  "dataSource"></property>	   
		<property name = "sql" value = "select * from access"></property>
		<property name = "rowMapper">
			<bean class = "org.springframework.jdbc.core.BeanPropertyRowMapper">
				<property name = "mappedClass" value = "com.cosy.sun.bean.Access"></property>
			</bean>
		</property>
	</bean>
	
	<bean id = "csvItemWriter"
			   class = "org.springframework.batch.item.file.FlatFileItemWriter"
			   scope = "step">
		<property name = "resource" value = "file:target/ch02/outputFile.csv" ></property>
		<property name = "lineAggregator">
			<bean class = "org.springframework.batch.item.file.transform.DelimitedLineAggregator" >
				<property name = "delimiter" value = "," ></property>
				<property name = "fieldExtractor">
					<bean class = "org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
						<property name = "names" value = "accountId,name,amount,data,address"></property>
					</bean>
				</property>
			</bean>
		</property>
	</bean>
	
</beans>